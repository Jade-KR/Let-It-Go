# Generated by Django 2.2.7 on 2020-06-02 23:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserLikeLegoSet',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'api_legoset_like_users',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=50)),
                ('image', models.TextField(null=True)),
                ('comment', models.CharField(max_length=300, null=True)),
                ('age', models.IntegerField(null=True)),
                ('gender', models.IntegerField(null=True)),
                ('review_count', models.IntegerField(default=0)),
                ('categories', models.TextField(null=True)),
                ('followers', models.ManyToManyField(related_name='followings', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('part_count', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Color',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, null=True)),
                ('rgb', models.TextField(null=True)),
                ('bricklink_ids', models.TextField(null=True)),
                ('bricklink_descrs', models.TextField(null=True)),
                ('official_ids', models.TextField(null=True)),
                ('official_descrs', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='LegoPart',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, null=True)),
                ('image', models.TextField(null=True)),
                ('bricklink_ids', models.TextField(null=True)),
                ('official_ids', models.TextField(null=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.Category')),
            ],
        ),
        migrations.CreateModel(
            name='LegoSet',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, null=True)),
                ('num_parts', models.IntegerField(null=True)),
                ('images', models.TextField(null=True)),
                ('description', models.CharField(max_length=500, null=True)),
                ('tags', models.CharField(max_length=200, null=True)),
                ('references', models.CharField(max_length=500, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('review_count', models.IntegerField(default=0)),
                ('like_count', models.IntegerField(default=0)),
                ('like_users', models.ManyToManyField(blank=True, related_name='like_sets', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('parent_id', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=100)),
                ('root_id', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserPart2',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Color')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LegoPart')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField()),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Color')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LegoPart')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SetPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(null=True)),
                ('color', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Color')),
                ('lego_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LegoSet')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LegoPart')),
            ],
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('score', models.IntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('lego_set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.LegoSet')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OfficialMapping',
            fields=[
                ('id', models.CharField(max_length=50, primary_key=True, serialize=False)),
                ('lego_set', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.LegoSet')),
            ],
        ),
        migrations.AddField(
            model_name='legoset',
            name='theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.Theme'),
        ),
        migrations.AddField(
            model_name='legoset',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
    ]
